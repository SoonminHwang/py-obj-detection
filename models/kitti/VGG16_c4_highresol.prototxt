name: "VGG16_RGB_Conv4_Pooling/2"
layer {
  name: 'input-data'
  type: 'Python'
  top: 'image'
  top: 'im_info'
  top: 'gt_boxes'
  python_param {
    module: 'roi_data_layer.layer'
    layer: 'RoIDataLayer'
    param_str: "'num_classes': 4"
  }
  include { phase: TRAIN }
}

layer {
  name: 'input-data'
  type: 'Python'
  top: 'image'
  top: 'im_info'
  top: 'gt_boxes'
  python_param {
    module: 'roi_data_layer.layer'
    layer: 'RoIDataLayer'
    param_str: "'num_classes': 4"
  }
  include: { phase: TEST stage: "val" }
}


layer {
  name: 'input-data'
  type: 'Input'
  top: 'image'
  top: 'im_info'
  input_param { 
    shape { dim: 1      dim: 3      dim: 375      dim: 1242 }
    shape { dim: 1      dim: 3 }  
  }

  include: { phase: TEST not_stage: "val" }
}

#========= conv1-conv5 ============

layer {
  name: "conv1_1"
  type: "Convolution"
  bottom: "image"
  top: "conv1_1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
    engine: CUDNN
  }
}
layer {
  name: "relu1_1"
  type: "ReLU"
  bottom: "conv1_1"
  top: "conv1_1"
  relu_param {
    negative_slope: 0.1
  }
}
layer {
  name: "conv1_2"
  type: "Convolution"
  bottom: "conv1_1"
  top: "conv1_2"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
    engine: CUDNN
  }
}
layer {
  name: "relu1_2"
  type: "ReLU"
  bottom: "conv1_2"
  top: "conv1_2"
  relu_param {
    negative_slope: 0.1
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1_2"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2_1"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2_1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
    engine: CUDNN
  }
}
layer {
  name: "relu2_1"
  type: "ReLU"
  bottom: "conv2_1"
  top: "conv2_1"
  relu_param {
    negative_slope: 0.1
  }
}
layer {
  name: "conv2_2"
  type: "Convolution"
  bottom: "conv2_1"
  top: "conv2_2"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
    engine: CUDNN
  }
}
layer {
  name: "relu2_2"
  type: "ReLU"
  bottom: "conv2_2"
  top: "conv2_2"
  relu_param {
    negative_slope: 0.1
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2_2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv3_1"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3_1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    engine: CUDNN
  }
}
layer {
  name: "relu3_1"
  type: "ReLU"
  bottom: "conv3_1"
  top: "conv3_1"
  relu_param {
    negative_slope: 0.1
  }
}
layer {
  name: "conv3_2"
  type: "Convolution"
  bottom: "conv3_1"
  top: "conv3_2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    engine: CUDNN
  }
}
layer {
  name: "relu3_2"
  type: "ReLU"
  bottom: "conv3_2"
  top: "conv3_2"
  relu_param {
    negative_slope: 0.1
  }
}
layer {
  name: "conv3_3"
  type: "Convolution"
  bottom: "conv3_2"
  top: "conv3_3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    engine: CUDNN
  }
}
layer {
  name: "relu3_3"
  type: "ReLU"
  bottom: "conv3_3"
  top: "conv3_3"
  relu_param {
    negative_slope: 0.1
  }
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv3_3"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv4_1"
  type: "Convolution"
  bottom: "pool3"
  top: "conv4_1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    engine: CUDNN
  }
}
layer {
  name: "relu4_1"
  type: "ReLU"
  bottom: "conv4_1"
  top: "conv4_1"
  relu_param {
    negative_slope: 0.1
  }
}
layer {
  name: "conv4_2"
  type: "Convolution"
  bottom: "conv4_1"
  top: "conv4_2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    engine: CUDNN
  }
}
layer {
  name: "relu4_2"
  type: "ReLU"
  bottom: "conv4_2"
  top: "conv4_2"
  relu_param {
    negative_slope: 0.1
  }
}
layer {
  name: "conv4_3"
  type: "Convolution"
  bottom: "conv4_2"
  top: "conv4_3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    engine: CUDNN
  }
}
layer {
  name: "relu4_3"
  type: "ReLU"
  bottom: "conv4_3"
  top: "conv4_3"
  relu_param {
    negative_slope: 0.1
  }
}

#========= RPN ============

layer {
  name: "rpn_conv/3x3"
  type: "Convolution"
  bottom: "conv4_3"
  top: "rpn/output"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 512
    kernel_size: 3 pad: 1 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
    engine: CUDNN
  }
}
layer {
  name: "rpn_relu/3x3"
  type: "ReLU"
  bottom: "rpn/output"
  top: "rpn/output"
  relu_param {
    negative_slope: 0.1
  }
}

layer {
  name: "rpn_cls_score"
  type: "Convolution"
  bottom: "rpn/output"
  top: "rpn_cls_score"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 40   # 2(bg/fg) * 20(anchors)
    kernel_size: 1 pad: 0 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
    engine: CUDNN
  }
}

layer {
  name: "rpn_bbox_pred"
  type: "Convolution"
  bottom: "rpn/output"
  top: "rpn_bbox_pred"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 80   # 4 * 20(anchors)
    kernel_size: 1 pad: 0 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
    engine: CUDNN
  }
}

layer {
   bottom: "rpn_cls_score"
   top: "rpn_cls_score_reshape"
   name: "rpn_cls_score_reshape"
   type: "Reshape"
   reshape_param { shape { dim: 0 dim: 2 dim: -1 dim: 0 } }
}

#========= RPN Loss (train) ============

layer {
  name: 'rpn-data'
  type: 'Python'
  bottom: 'rpn_cls_score'
  bottom: 'gt_boxes'
  bottom: 'im_info'
  bottom: 'image'
  top: 'rpn_labels'
  top: 'rpn_bbox_targets'
  top: 'rpn_bbox_inside_weights'
  top: 'rpn_bbox_outside_weights'
  python_param {
    module: 'rpn.anchor_target_layer'
    layer: 'AnchorTargetLayer'
    param_str: "'feat_stride': 8"
    #param_str: "'feat_stride': 16"
  }
  include { phase: TRAIN }
  include { phase: TEST stage: "val" }
}

layer {
  name: "rpn_loss_cls"
  type: "SoftmaxWithLoss"
  bottom: "rpn_cls_score_reshape"
  bottom: "rpn_labels"
  propagate_down: 1
  propagate_down: 0
  top: "rpn_loss_cls"
  loss_weight: 1
  loss_param {
    ignore_label: -1
    normalize: true
  }
  include { phase: TRAIN }
  include { phase: TEST stage: "val" }
}

layer {
  name: "rpn_loss_bbox"
  type: "SmoothL1Loss"
  bottom: "rpn_bbox_pred"
  bottom: "rpn_bbox_targets"
  bottom: 'rpn_bbox_inside_weights'
  bottom: 'rpn_bbox_outside_weights'
  top: "rpn_loss_bbox"
  loss_weight: 1
  smooth_l1_loss_param { sigma: 3.0 }

  include { phase: TRAIN }
  include { phase: TEST stage: "val" }
}

#========= RoI Proposal ============

layer {
  name: "rpn_cls_prob"
  type: "Softmax"
  bottom: "rpn_cls_score_reshape"
  top: "rpn_cls_prob"
}

layer {
  name: 'rpn_cls_prob_reshape'
  type: 'Reshape'
  bottom: 'rpn_cls_prob'
  top: 'rpn_cls_prob_reshape'
  reshape_param { shape { dim: 0 dim: 40 dim: -1 dim: 0 } }   # 2 x 6
}

layer {
  name: 'proposal'
  type: 'Python'
  bottom: 'rpn_cls_prob_reshape'
  bottom: 'rpn_bbox_pred'
  bottom: 'im_info'
  top: 'rpn_rois'
  #top: 'rpn_scores'
  python_param {
    module: 'rpn.proposal_layer'
    layer: 'ProposalLayer'    
    param_str: "'feat_stride': 8"     # Conv4
    #param_str: "'feat_stride': 16"
  }
  include { phase: TRAIN }
  include { phase: TEST stage: "val" }
}

layer {
  name: 'proposal'
  type: 'Python'
  bottom: 'rpn_cls_prob_reshape'
  bottom: 'rpn_bbox_pred'
  bottom: 'im_info'
  top: 'rois'
  python_param {
    module: 'rpn.proposal_layer'
    layer: 'ProposalLayer'    
    param_str: "'feat_stride': 8"     # Conv4
    #param_str: "'feat_stride': 16"
  }
  include { phase: TEST not_stage: "val" }
}

#========= Prepare GT for final loss (train) ============

layer {
  name: 'roi-data'
  type: 'Python'
  bottom: 'rpn_rois'
  bottom: 'gt_boxes'
  top: 'rois'
  top: 'labels'
  top: 'bbox_targets'
  top: 'bbox_inside_weights'
  top: 'bbox_outside_weights'
  python_param {
    module: 'rpn.proposal_target_layer'
    layer: 'ProposalTargetLayer'
    param_str: "'num_classes': 4"
  }
  include { phase: TRAIN }
  include { phase: TEST stage: "val" }
}

#========= RCNN ============

layer {
  name: "upsample3"
  type: "Deconvolution"
  bottom: "conv4_3"
  top: "upsample3"

  param { lr_mult: 1.0 }
  convolution_param {
    num_output: 512
    group: 512
    bias_term: false
    pad: 1
    kernel_size: 4
    stride: 2
    weight_filler {
      type: "bilinear"
    }
    engine: CUDNN
  }
}

layer {
  name: "relu_up3"
  type: "ReLU"
  bottom: "upsample3"
  top: "upsample3"
  relu_param {
    negative_slope: 0.1
  }
}

layer {
  name: "Concat3"
  type: "Concat"
  bottom: "conv3_3"
  bottom: "upsample3"  
  top: "concat3"
}

layer {
  name: "catcat3_conv"
  type: "Convolution"
  bottom: "concat3"
  top: "concat3_conv"
  param {    lr_mult: 1    decay_mult: 0  }
  param {    lr_mult: 1    decay_mult: 0  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {      type: "msra"    }
    bias_filler {      type: "constant"    }
    engine: CUDNN
  }
}

layer {
  name: "upsample2"
  type: "Deconvolution"
  bottom: "concat3_conv"
  top: "upsample2"

  param { lr_mult: 1.0 }
  convolution_param {
    num_output: 256
    group: 256
    bias_term: false
    pad: 1
    kernel_size: 4
    stride: 2
    weight_filler {
      type: "bilinear"
    }
    engine: CUDNN
  }
}

layer {
  name: "relu_up2"
  type: "ReLU"
  bottom: "upsample2"
  top: "upsample2"
  relu_param {
    negative_slope: 0.1
  }
}

layer {
  name: "Concat2"
  type: "Concat"
  bottom: "conv2_2"
  bottom: "upsample2"
  top: "concat2"
}

layer {
  name: "catcat2_conv"
  type: "Convolution"
  bottom: "concat2"
  top: "concat2_conv"
  param {    lr_mult: 1    decay_mult: 0  }
  param {    lr_mult: 1    decay_mult: 0  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {      type: "msra"    }
    bias_filler {      type: "constant"    }
    engine: CUDNN
  }
}




layer {
  #name: "roi_pool4"
  name: "roi_concat2"
  type: "ROIPooling"
  #bottom: "conv4_3"
  #bottom: "conv4_3_2x"
  bottom: "concat2_conv"
  bottom: "rois"
  #top: "pool4"
  top: "roi_concat2"
  roi_pooling_param {
    pooled_w: 7
    pooled_h: 7
    spatial_scale: 0.5 # 1/2
    #spatial_scale: 0.25 # 1/4
    #spatial_scale: 0.125 # 1/8
    #spatial_scale: 0.0625 # 1/16
  }
}
layer {
  name: "fc6"
  type: "InnerProduct"
  #bottom: "pool4"
  bottom: "roi_concat2"  
  top: "fc6"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 4096
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6"
  top: "fc6"
  relu_param {
    negative_slope: 0.1
  }
}
layer {
  name: "drop6"
  type: "Dropout"
  bottom: "fc6"
  top: "fc6"
  dropout_param {
    dropout_ratio: 0.8
  }
}
layer {
  name: "fc7"
  type: "InnerProduct"
  bottom: "fc6"
  top: "fc7"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 4096
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7"
  top: "fc7"
  relu_param {
    negative_slope: 0.1
  }
}
layer {
  name: "drop7"
  type: "Dropout"
  bottom: "fc7"
  top: "fc7"
  dropout_param {
    dropout_ratio: 0.8
  }
}
layer {
  name: "cls_score"
  type: "InnerProduct"
  bottom: "fc7"
  top: "cls_score"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 4
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "bbox_pred"
  type: "InnerProduct"
  bottom: "fc7"
  top: "bbox_pred"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 16    # 4 * 4 -> 9 x 4
    weight_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

#========= Detection Loss (train) ============

layer {
  name: "loss_cls"
  type: "SoftmaxWithLoss"
  bottom: "cls_score"
  bottom: "labels"
  propagate_down: 1
  propagate_down: 0
  top: "loss_cls"  
  loss_weight: 1

  loss_param {
    ignore_label: -1
    normalize: true
  }

  include { phase: TRAIN }
  include { phase: TEST stage: "val" }
}
layer {
  name: "loss_bbox"
  type: "SmoothL1Loss"
  bottom: "bbox_pred"
  bottom: "bbox_targets"
  bottom: "bbox_inside_weights"
  bottom: "bbox_outside_weights"
  top: "loss_bbox"
  loss_weight: 1

  include { phase: TRAIN }
  include { phase: TEST stage: "val" }
}

#========= Detection (val, deploy) ============
layer {
  name: "cls_prob"
  type: "Softmax"
  bottom: "cls_score"
  top: "cls_prob"
  
  include { phase: TEST }
}

layer {
    type: 'Python'
    name: 'detections'
    # gt_bbox_list is a batch_size x num_boxes_after_nms x 5 blob        
    top: 'bbox_list'
    bottom: 'cls_prob'
    bottom: 'bbox_pred'
    bottom: 'rois'
    bottom: 'im_info'
    python_param {
        module: 'eval.detectnet'
        layer: 'DetectionLayer'            
        param_str : "'nms_thres': 0.3"
    }
  include: { phase: TEST }
}

layer {
  type: 'Silence'
  name: 'silence_bbox_list'
  bottom: 'bbox_list'
  include: { phase: TEST }
}

#layer {
#  type: 'Python'
#  name: 'mAP'    
#  top: 'mAP_Ped'
#  top: 'mAP_Cyc'
#  top: 'mAP_Car'
#  bottom: 'bbox_list'
#  bottom: 'gt_boxes'
#  bottom: 'image'
#  bottom: 'im_info'
#  python_param {
#      module: 'eval.detectnet'
#      layer: 'EvalLayer'
#      # parameters (default)
#      #   - DIFFICULTY = {'easy': 0, 'moderate': 1, 'hard': 2}
#      #   - MIN_HEIGHT = (40, 25, 25)
#      #   - MAX_OCCLUSION = (0, 1, 2)
#      #   - MAX_TRANCATION = (0.15, 0.3, 0.5)
#      #   - CLASSES = {'Car': 0, 'Pedestrian': 1, 'Cyclist': 2}
#      #   - NEIGHBOR_CLASSES = {'Car': ['Van'], 'Pedestrian': ['Person_sitting'], 'Cyclist': []]}
#      #   - MIN_OVERLAP = (0.7, 0.5, 0.5)
#      #   - N_SAMPLE_PTS = 41
#      # Ex) param_str : "{MIN_OVERLAP: (0.7, 0.5, 0.5)}
#      param_str : "{}"
#  }
#  include: { phase: TEST stage: "val" }
#}