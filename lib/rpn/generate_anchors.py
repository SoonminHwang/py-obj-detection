# --------------------------------------------------------
# Faster R-CNN
# Copyright (c) 2015 Microsoft
# Licensed under The MIT License [see LICENSE for details]
# Written by Ross Girshick and Sean Bell
# --------------------------------------------------------

import numpy as np
# Verify that we compute the same anchors as Shaoqing's matlab implementation:
#
#    >> load output/rpn_cachedir/faster_rcnn_VOC2007_ZF_stage1_rpn/anchors.mat
#    >> anchors
#
#    anchors =
#
#       -83   -39   100    56
#      -175   -87   192   104
#      -359  -183   376   200
#       -55   -55    72    72
#      -119  -119   136   136
#      -247  -247   264   264
#       -35   -79    52    96
#       -79  -167    96   184
#      -167  -343   184   360

#array([[ -83.,  -39.,  100.,   56.],
#       [-175.,  -87.,  192.,  104.],
#       [-359., -183.,  376.,  200.],
#       [ -55.,  -55.,   72.,   72.],
#       [-119., -119.,  136.,  136.],
#       [-247., -247.,  264.,  264.],
#       [ -35.,  -79.,   52.,   96.],
#       [ -79., -167.,   96.,  184.],
#       [-167., -343.,  184.,  360.]])

def kitti_kmeans_anchors_1x(num_anchors):
    # imdb
    # 'hRng' : [20, np.inf], # Min. 20 x 50 or 25 x 40
    # 'occLevel' : [0, 1, 2],       # 0: fully visible, 1: partly occ, 2: largely occ, 3: unknown
    # 'truncRng' : [0, 0.5]
    
    # # of anchors: 70, scale1x (375x1242)
    if num_anchors == 20:
        anchors = np.array([[  -5.11,  -15.12,    5.11,   15.12],
                           [ -12.76,  -11.17,   12.76,   11.17],
                           [ -16.21,  -13.99,   16.21,   13.99],
                           [  -9.09,  -25.43,    9.09,   25.43],
                           [ -21.66,  -11.4 ,   21.66,   11.4 ],
                           [ -21.59,  -17.58,   21.59,   17.58],
                           [ -32.6 ,  -14.03,   32.6 ,   14.03],
                           [ -15.07,  -37.84,   15.07,   37.84],
                           [ -28.48,  -22.83,   28.48,   22.83],
                           [ -44.33,  -18.38,   44.33,   18.38],
                           [ -38.41,  -29.84,   38.41,   29.84],
                           [ -24.03,  -58.26,   24.03,   58.26],
                           [ -60.08,  -24.46,   60.08,   24.46],
                           [ -54.33,  -39.69,   54.33,   39.69],
                           [ -82.53,  -33.71,   82.53,   33.71],
                           [ -40.03,  -86.25,   40.03,   86.25],
                           [ -79.47,  -53.75,   79.47,   53.75],
                           [-121.2 ,  -47.84,  121.2 ,   47.84],
                           [-114.14,  -77.45,  114.14,   77.45],
                           [-173.67,  -94.27,  173.67,   94.27]])

    elif num_anchors == 70:
        anchors = np.array([[  -3.86,  -14.34,    3.86,   14.34],
                           [  -4.92,  -19.11,    4.92,   19.11],
                           [  -6.36,  -16.58,    6.36,   16.58],
                           [  -7.4 ,  -22.69,    7.4 ,   22.69],
                           [ -13.49,  -13.16,   13.49,   13.16],
                           [  -9.76,  -19.49,    9.76,   19.49],
                           [ -16.36,  -13.  ,   16.36,   13.  ],
                           [  -9.35,  -27.15,    9.35,   27.15],
                           [ -17.08,  -15.17,   17.08,   15.17],
                           [ -21.22,  -13.14,   21.22,   13.14],
                           [ -17.87,  -18.63,   17.87,   18.63],
                           [ -20.29,  -16.58,   20.29,   16.58],
                           [ -11.06,  -31.59,   11.06,   31.59],
                           [ -15.05,  -24.62,   15.05,   24.62],
                           [ -24.8 ,  -15.05,   24.8 ,   15.05],
                           [ -29.63,  -13.24,   29.63,   13.24],
                           [ -21.22,  -20.24,   21.22,   20.24],
                           [ -24.3 ,  -18.7 ,   24.3 ,   18.7 ],
                           [ -13.35,  -36.08,   13.35,   36.08],
                           [ -35.8 ,  -13.78,   35.8 ,   13.78],
                           [ -29.82,  -17.38,   29.82,   17.38],
                           [ -24.44,  -23.58,   24.44,   23.58],
                           [ -27.83,  -21.58,   27.83,   21.58],
                           [ -38.22,  -16.51,   38.22,   16.51],
                           [ -20.  ,  -32.7 ,   20.  ,   32.7 ],
                           [ -15.73,  -42.46,   15.73,   42.46],
                           [ -46.2 ,  -15.21,   46.2 ,   15.21],
                           [ -35.9 ,  -20.35,   35.9 ,   20.35],
                           [ -27.61,  -27.11,   27.61,   27.11],
                           [ -31.96,  -24.42,   31.96,   24.42],
                           [ -45.72,  -18.35,   45.72,   18.35],
                           [ -18.83,  -49.75,   18.83,   49.75],
                           [ -45.21,  -22.41,   45.21,   22.41],
                           [ -33.31,  -30.56,   33.31,   30.56],
                           [ -38.49,  -26.84,   38.49,   26.84],
                           [ -29.08,  -36.48,   29.08,   36.48],
                           [ -55.4 ,  -19.62,   55.4 ,   19.62],
                           [ -24.89,  -54.08,   24.89,   54.08],
                           [ -40.29,  -33.83,   40.29,   33.83],
                           [ -55.04,  -24.79,   55.04,   24.79],
                           [ -47.02,  -29.51,   47.02,   29.51],
                           [ -22.42,  -65.93,   22.42,   65.93],
                           [ -65.8 ,  -23.02,   65.8 ,   23.02],
                           [ -35.06,  -47.05,   35.06,   47.05],
                           [ -51.39,  -35.26,   51.39,   35.26],
                           [ -63.39,  -29.02,   63.39,   29.02],
                           [ -46.19,  -41.81,   46.19,   41.81],
                           [ -30.21,  -75.17,   30.21,   75.17],
                           [ -80.03,  -28.49,   80.03,   28.49],
                           [ -59.78,  -40.77,   59.78,   40.77],
                           [ -73.04,  -34.28,   73.04,   34.28],
                           [ -55.26,  -51.2 ,   55.26,   51.2 ],
                           [ -82.7 ,  -40.24,   82.7 ,   40.24],
                           [ -39.2 ,  -85.07,   39.2 ,   85.07],
                           [ -70.19,  -47.66,   70.19,   47.66],
                           [ -97.39,  -34.94,   97.39,   34.94],
                           [ -71.06,  -63.74,   71.06,   63.74],
                           [ -99.44,  -45.66,   99.44,   45.66],
                           [ -85.71,  -54.49,   85.71,   54.49],
                           [-125.59,  -43.24,  125.59,   43.24],
                           [ -52.72, -103.2 ,   52.72,  103.2 ],
                           [-108.9 ,  -58.05,  108.9 ,   58.05],
                           [ -95.06,  -70.98,   95.06,   70.98],
                           [-153.7 ,  -56.57,  153.7 ,   56.57],
                           [-123.17,  -70.87,  123.17,   70.87],
                           [-104.14, -103.45,  104.14,  103.45],
                           [-133.9 ,  -84.75,  133.9 ,   84.75],
                           [-156.2 ,  -95.38,  156.2 ,   95.38],
                           [-197.8 ,  -87.78,  197.8 ,   87.78],
                           [-189.02, -124.87,  189.02,  124.87]])
    else:
        raise NotImplementedError

    return anchors

def kitti_kmeans_anchors_2x(num_anchors):
    # imdb
    # 'hRng' : [20, np.inf], # Min. 20 x 50 or 25 x 40
    # 'occLevel' : [0, 1, 2],       # 0: fully visible, 1: partly occ, 2: largely occ, 3: unknown
    # 'truncRng' : [0, 0.5]
    if num_anchors == 20:
        anchors = np.array([[ -10.03,  -29.68,   10.03,   29.68],
                           [ -26.15,  -23.  ,   26.15,   23.  ],
                           [ -17.56,  -49.53,   17.56,   49.53],
                           [ -33.75,  -28.91,   33.75,   28.91],
                           [ -43.87,  -22.91,   43.87,   22.91],
                           [ -44.16,  -35.58,   44.16,   35.58],
                           [ -67.04,  -28.64,   67.04,   28.64],
                           [ -28.79,  -72.64,   28.79,   72.64],
                           [ -56.93,  -45.81,   56.93,   45.81],
                           [ -91.15,  -37.77,   91.15,   37.77],
                           [ -75.42,  -58.97,   75.42,   58.97],
                           [ -45.63, -111.37,   45.63,  111.37],
                           [-123.  ,  -49.84,  123.  ,   49.84],
                           [-104.43,  -76.59,  104.43,   76.59],
                           [-166.75,  -68.32,  166.75,   68.32],
                           [ -77.97, -170.51,   77.97,  170.51],
                           [-150.59, -103.76,  150.59,  103.76],
                           [-240.29,  -96.97,  240.29,   96.97],
                           [-219.06, -152.54,  219.06,  152.54],
                           [-340.72, -187.04,  340.72,  187.04]])

    elif num_anchors == 70:
        # # of anchors: 70, scale2x (755x2500)
        anchors = np.array([[  -8.15,  -29.64,    8.15,   29.64],
                           [  -9.92,  -40.11,    9.92,   40.11],
                           [ -12.49,  -31.93,   12.49,   31.93],
                           [ -13.9 ,  -41.98,   13.9 ,   41.98],
                           [ -27.15,  -26.49,   27.15,   26.49],
                           [ -20.32,  -38.53,   20.32,   38.53],
                           [ -16.33,  -48.47,   16.33,   48.47],
                           [ -32.78,  -26.32,   32.78,   26.32],
                           [ -34.69,  -30.79,   34.69,   30.79],
                           [ -41.93,  -26.65,   41.93,   26.65],
                           [ -20.02,  -56.61,   20.02,   56.61],
                           [ -37.38,  -36.64,   37.38,   36.64],
                           [ -52.37,  -26.64,   52.37,   26.64],
                           [ -43.85,  -33.21,   43.85,   33.21],
                           [ -30.62,  -49.52,   30.62,   49.52],
                           [ -23.64,  -68.57,   23.64,   68.57],
                           [ -55.04,  -32.36,   55.04,   32.36],
                           [ -43.8 ,  -40.68,   43.8 ,   40.68],
                           [ -66.16,  -27.09,   66.16,   27.09],
                           [ -52.25,  -39.97,   52.25,   39.97],
                           [ -30.26,  -71.18,   30.26,   71.18],
                           [ -84.36,  -28.73,   84.36,   28.73],
                           [ -50.74,  -48.15,   50.74,   48.15],
                           [ -74.64,  -32.86,   74.64,   32.86],
                           [ -65.67,  -38.54,   65.67,   38.54],
                           [ -29.86,  -88.88,   29.86,   88.88],
                           [ -43.67,  -60.88,   43.67,   60.88],
                           [ -59.69,  -46.12,   59.69,   46.12],
                           [ -88.98,  -35.97,   88.98,   35.97],
                           [ -58.05,  -55.24,   58.05,   55.24],
                           [ -37.9 ,  -90.43,   37.9 ,   90.43],
                           [ -82.17,  -43.13,   82.17,   43.13],
                           [-105.88,  -34.03,  105.88,   34.03],
                           [ -71.18,  -51.39,   71.18,   51.39],
                           [ -69.07,  -63.13,   69.07,   63.13],
                           [-105.57,  -41.79,  105.57,   41.79],
                           [ -60.47,  -75.79,   60.47,   75.79],
                           [ -42.06, -116.46,   42.06,  116.46],
                           [ -82.96,  -59.34,   82.96,   59.34],
                           [ -98.91,  -49.86,   98.91,   49.86],
                           [-131.02,  -43.05,  131.02,   43.05],
                           [ -54.94, -109.33,   54.94,  109.33],
                           [-122.48,  -51.4 ,  122.48,   51.4 ],
                           [ -87.74,  -72.54,   87.74,   72.54],
                           [-102.33,  -63.57,  102.33,   63.57],
                           [ -90.14,  -90.32,   90.14,   90.32],
                           [ -53.54, -152.09,   53.54,  152.09],
                           [-131.56,  -62.5 ,  131.56,   62.5 ],
                           [-156.7 ,  -56.49,  156.7 ,   56.49],
                           [-114.8 ,  -79.97,  114.8 ,   79.97],
                           [ -68.32, -143.39,   68.32,  143.39],
                           [-156.3 ,  -73.9 ,  156.3 ,   73.9 ],
                           [-118.1 , -107.32,  118.1 ,  107.32],
                           [-140.09,  -93.25,  140.09,   93.25],
                           [ -73.64, -179.06,   73.64,  179.06],
                           [-194.04,  -69.6 ,  194.04,   69.6 ],
                           [ -92.52, -183.91,   92.52,  183.91],
                           [-186.74,  -92.41,  186.74,   92.41],
                           [-163.21, -113.73,  163.21,  113.73],
                           [-237.71,  -84.82,  237.71,   84.82],
                           [-118.05, -214.63,  118.05,  214.63],
                           [-213.08, -120.22,  213.08,  120.22],
                           [-180.52, -146.07,  180.52,  146.07],
                           [-274.61, -102.48,  274.61,  102.48],
                           [-250.69, -151.21,  250.69,  151.21],
                           [-332.59, -126.28,  332.59,  126.28],
                           [-214.03, -206.52,  214.03,  206.52],
                           [-298.27, -184.74,  298.27,  184.74],
                           [-396.23, -182.24,  396.23,  182.24],
                           [-370.13, -252.58,  370.13,  252.58]])
    else:
        raise NotImplementedError

    return anchors

def generate_anchors(base_size=16, ratios=[0.5, 1, 2],
                     scales=2**np.arange(3, 6)):
    """
    Generate anchor (reference) windows by enumerating aspect ratios X
    scales wrt a reference (0, 0, 15, 15) window.
    """

    base_anchor = np.array([1, 1, base_size, base_size]) - 1
    ratio_anchors = _ratio_enum(base_anchor, ratios)
    anchors = np.vstack([_scale_enum(ratio_anchors[i, :], scales)
                         for i in xrange(ratio_anchors.shape[0])])
    return anchors

def _whctrs(anchor):
    """
    Return width, height, x center, and y center for an anchor (window).
    """

    w = anchor[2] - anchor[0] + 1
    h = anchor[3] - anchor[1] + 1
    x_ctr = anchor[0] + 0.5 * (w - 1)
    y_ctr = anchor[1] + 0.5 * (h - 1)
    return w, h, x_ctr, y_ctr

def _mkanchors(ws, hs, x_ctr, y_ctr):
    """
    Given a vector of widths (ws) and heights (hs) around a center
    (x_ctr, y_ctr), output a set of anchors (windows).
    """

    ws = ws[:, np.newaxis]
    hs = hs[:, np.newaxis]
    anchors = np.hstack((x_ctr - 0.5 * (ws - 1),
                         y_ctr - 0.5 * (hs - 1),
                         x_ctr + 0.5 * (ws - 1),
                         y_ctr + 0.5 * (hs - 1)))
    return anchors

def _ratio_enum(anchor, ratios):
    """
    Enumerate a set of anchors for each aspect ratio wrt an anchor.
    """

    w, h, x_ctr, y_ctr = _whctrs(anchor)
    size = w * h
    size_ratios = size / ratios
    ws = np.round(np.sqrt(size_ratios))
    hs = np.round(ws * ratios)
    anchors = _mkanchors(ws, hs, x_ctr, y_ctr)
    return anchors

def _scale_enum(anchor, scales):
    """
    Enumerate a set of anchors for each scale wrt an anchor.
    """

    w, h, x_ctr, y_ctr = _whctrs(anchor)
    ws = w * scales
    hs = h * scales
    anchors = _mkanchors(ws, hs, x_ctr, y_ctr)
    return anchors

if __name__ == '__main__':
    import time
    t = time.time()
    a = generate_anchors()
    print time.time() - t
    print a
    from IPython import embed; embed()
